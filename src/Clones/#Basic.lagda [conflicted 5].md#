---
layout: default
title : "Clones.Basic module"
date : "2023-10-18"
author: "Gonzalo Zigarán"
---

# Clones


```agda

module Clones.Basic where

open import Agda.Primitive               using () renaming ( Set to Type )
open import Level                        using ( Level ; _⊔_ )
open import Data.Nat using (ℕ ; zero ; suc)
open import Data.Empty 
open import Data.Fin
open import Data.Product

open import Overture.Operations          using ( Op ; arity[_])

private variable α β ρ 𝓥 : Level
private variable A : Type α 

TyConst : Type α → Type α
TyConst A = Op A ⊥

propiedad : (a : A) → TyConst A
propiedad a _ = a

propiedad' : TyConst A → A
propiedad' f = f (λ ())

Op' : Type α → Type 𝓥 → Type (α ⊔ 𝓥)
Op' A I = (I → A) → A

FinOp : { n : ℕ} → Type α → Type α 
FinOp {n = n} A = (Op A (Fin n))

proj : {n : ℕ} → Fin n → FinOp A
proj k = λ x → x k

π : {I : Type 𝓥} {A : Type α } → I → Op A I
π i = λ x → x i

sucFinOp : FinOp {n = 1} ℕ
sucFinOp = λ f → ℕ.suc (f Fin.zero)

_^_ : Type α → ℕ → Type α
A ^ ℕ.zero = A
A ^ (ℕ.suc n) = A → A ^ n 

FinOp' : Type α → Type α 
FinOp' A = Σ[ n ∈ ℕ ] (A ^ n)

sucFinOp' : FinOp' ℕ
sucFinOp' = 1 ,  ℕ.suc

proj' : (n : ℕ) → Fin n → A ^ n
proj' zero ()
proj' (suc zero) zero = λ a₀ → a₀
proj' (suc (suc n)) zero = λ a₀ a₁ → proj' (suc n) zero a₀
proj' (suc (suc n)) (suc k) = λ a₀ a₁ → proj' (suc n) k a₁


toOp : ∀ {A} n → (A ^ n) → FinOp {n = n} A
toOp zero f g = f
toOp (suc n) f g = toOp n (f (g zero)) (λ k -> g (suc k))



```
